<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on New River, New Water</title>
    <link>http://localhost:1313/categories/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on New River, New Water</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2024, muyao haruka hsiao.</copyright>
    <lastBuildDate>Wed, 24 Nov 2021 21:50:38 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为何分贝总是负值？</title>
      <link>http://localhost:1313/%E4%B8%BA%E4%BD%95%E5%88%86%E8%B4%9D%E6%80%BB%E6%98%AF%E8%B4%9F%E5%80%BC/</link>
      <pubDate>Wed, 24 Nov 2021 21:50:38 +0800</pubDate>
      <guid>http://localhost:1313/%E4%B8%BA%E4%BD%95%E5%88%86%E8%B4%9D%E6%80%BB%E6%98%AF%E8%B4%9F%E5%80%BC/</guid>
      <description>使用音频软件对音乐进行编辑的时候，我们几乎总是会注意到，在这些软件中，音乐的分贝总是一个负值(下面是一张compressor（压缩器）的截图，请注意红色方框中但分贝数字)：&#xA;这几乎和我们日常的经验截然不同，日常生活中，我们常能听到类似以下的描述：&#xA;人耳最好不要长期曝露在xx分贝之下&#xA;或者&#xA;施工的声音大约是xx分贝&#xA;dB（分贝），似乎是我们都很熟悉很基本的对声音大小进行衡量的单位，但此时跟在一个负值后面的它显得如此陌生。事实上，前面一句话的「对声音大小进行衡量的单位」这句话就非常模糊，何谓声音大小？如果两个人的耳朵对于同样的声音有着不同的敏感度的话，那么这个声音对于两个人的声音大小是不同的吗？一旦有诸如此类的问题，我们就会发现对声音大小（响度）进行描述的物理单位似乎需要被更严谨地定义。&#xA;If you like my article and want to make a donation, you can click the 捐赠 Donation button on the side bar.</description>
    </item>
    <item>
      <title>Juicy Steak, Finally</title>
      <link>http://localhost:1313/juicy-steak-finally/</link>
      <pubDate>Mon, 04 Oct 2021 18:38:25 +0800</pubDate>
      <guid>http://localhost:1313/juicy-steak-finally/</guid>
      <description>连续几个周末，因为减肥的需求，有时候我依靠牛排来度过一餐晚饭。在我的记忆中，我在日本的时候可以做出很好吃的牛排，但前几个星期我做出的牛排又老又柴，不能说难以下咽，但也着实不符合我心目中自己的水准。&#xA;黄油，迷迭香这些配料我应有尽有，但总感觉是错了什么步骤，直到昨天看了名厨Gorden Ramsay的几个视频(比如 厨神戈登·拉姆齐教你：在家烹饪出完美牛排的10大要点， 还有 地狱厨神戈登拉姆齐：如何煎出完美牛排)我才明白自己究竟犯了什么错误：&#xA;牛排不要洗，而是用厨房纸巾把牛排表面解冻的血水吸干（这是我自己总结出来的，但在知乎上似乎有一些争论） 在砧板上用手撒盐，牛排在表面滚动充分吸收盐分 放入锅的瞬间要用手将牛排摆在锅里，并且按实使得牛肉与油锅充分接触 煎牛排的时候先只用油煎，大蒜和迷迭香要在几乎两面都煎好之后放 黄油要在起锅之前最后放，然后用勺子舀起黄油泼在牛排上（这样才有充分的黄油香味） 如果不是用刀叉吃而是用筷子吃的话，摆盘前应当先切片（这当然也是我的经验） 仅仅是遵循了上述的步骤，今天做出的牛排就远胜前几次。&#xA;If you like my article and want to make a donation, you can click the 捐赠 Donation button on the side bar.</description>
    </item>
    <item>
      <title>双系统升级Win10 20H1的时候Linux引导失效修理</title>
      <link>http://localhost:1313/%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7win10-20h1%E7%9A%84%E6%97%B6%E5%80%99linux%E5%BC%95%E5%AF%BC%E5%A4%B1%E6%95%88%E4%BF%AE%E7%90%86/</link>
      <pubDate>Mon, 26 Jul 2021 10:06:18 +0800</pubDate>
      <guid>http://localhost:1313/%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7win10-20h1%E7%9A%84%E6%97%B6%E5%80%99linux%E5%BC%95%E5%AF%BC%E5%A4%B1%E6%95%88%E4%BF%AE%E7%90%86/</guid>
      <description>The Situation Dual boot: Win10 and Manjaro Linux.&#xA;When trying to update Win10 to the latest Win10 20H version, after rebooting my system, it did not enter the booting interface, rather it says:&#xA;Unknown filesystem, entering rescue mod&#xA;First Try After searching the internet, I find this video shows the same problem.&#xA;However, after I ls my hd partion one by one on my pc, I found there are 3 partions showing they have ext2 filesystem.</description>
    </item>
    <item>
      <title>Tritone, 三全音代理或降二代五和弦</title>
      <link>http://localhost:1313/tritone-%E4%B8%89%E5%85%A8%E9%9F%B3%E4%BB%A3%E7%90%86%E6%88%96%E9%99%8D%E4%BA%8C%E4%BB%A3%E4%BA%94%E5%92%8C%E5%BC%A6/</link>
      <pubDate>Sun, 30 May 2021 18:18:15 +0800</pubDate>
      <guid>http://localhost:1313/tritone-%E4%B8%89%E5%85%A8%E9%9F%B3%E4%BB%A3%E7%90%86%E6%88%96%E9%99%8D%E4%BA%8C%E4%BB%A3%E4%BA%94%E5%92%8C%E5%BC%A6/</guid>
      <description>复习时间 II-&amp;gt;V-&amp;gt;I 五级和弦（特别是属七和弦）有强烈的趋势接到一级和弦，最常见的C大调progression:&#xA;Dm -&amp;gt; G7 -&amp;gt; C 从和弦级数上来说就是II -&amp;gt; V -&amp;gt; I.&#xA;因此从功能和声的角度来说，V是I的Dominant Chord(属和弦)&#xA;Why 因为属和弦有非常不稳定的组合。&#xA;Take G7 chord for an example. It is composed of:&#xA;G, B, D, F and between B and F is 6 halftone, that is 3 whole tone, and it sounds so discordant &amp;ndash; which makes us have a strong motivation to solve it to Tonic Chord.&#xA;Here we get the name: Tritone (that is 3 whole tone).</description>
    </item>
    <item>
      <title>Note for TOXIC breakdown</title>
      <link>http://localhost:1313/note-for-toxic-breakdown/</link>
      <pubDate>Thu, 06 May 2021 21:27:12 +0800</pubDate>
      <guid>http://localhost:1313/note-for-toxic-breakdown/</guid>
      <description>Britney Spears的Toxic一直是我喜欢的一首歌，Britney Spears: The Story of Toxic 解析了这首歌的制作，以下是一些提到的或许有用的点：&#xA;前奏的采样 前奏的采样来自于一首印度所谓バングラ音乐：&#xA;There Mere Beech Mein (Late Mangeshkar &amp;amp; S.P. Balasubrahmanyam, 1981)&#xA;之前另一则视频生动形象地演示给了我们前奏是如何采样的，只能说惊为天人。&#xA;从采样到最终的成品，前奏之所以可以做得这么扁平乃是因为一个简单的EQ，将低频和高频几乎全部截去。当然也用到了一点点的混响。&#xA;原声吉他 使用到了压缩。何谓压缩(compression)，视频主用了一个比喻：「就像把东西推到你的脸上」。听感而言就是觉得离自己非常近。&#xA;如此说来，Podcast类音频的制作或许使用压缩是一个好办法。&#xA;电吉他 副歌部分结束的Surf Rock Guitar的音效是怎么来的呢？&#xA;如果去掉所有效果，听起来几乎就是midi guitar的声音，但是使用了&#xA;Lo-Fi Slap(一种Slap delay) 频率曲线截去低频和高频 一些guitar rig reverb 增六和弦: Augmented Sixth Chords 好和弦关于增六和弦的说明&#xA;增六度接八度，是一个古典音乐常用的写法。&#xA;C大调的Ab - F# (常常出现在一个调的降6度)，很容易接到G - G，也就是增六和弦接到G和弦或者C/G和弦。&#xA;这首歌的制作人之一 Cathy Dennis, 90年代就一度非常厉害的创作歌手，出道专辑销量也非常不错。千禧年之后转型制作人，除了这首歌之外，她还有炮制了一些金曲例如：&#xA;Can&amp;rsquo;t Get You Out of My Head, Kylie Minogue I Kissed a Girl, Katy Perry 如何获得音频片段 这是我在reddit上搜索到的。尽管并非官方的project（如同Logic Pro里自带的演示项目那样），但在网络上搜索「{曲名} + stems」就可以搜索到很多的这样的工程。</description>
    </item>
    <item>
      <title>从马尔可夫不等式到弱大数定律</title>
      <link>http://localhost:1313/2020/01/18/%E4%BB%8E%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E4%B8%8D%E7%AD%89%E5%BC%8F%E5%88%B0%E5%BC%B1%E5%A4%A7%E6%95%B0%E5%AE%9A%E5%BE%8B/</link>
      <pubDate>Sat, 18 Jan 2020 19:15:01 +0000</pubDate>
      <guid>http://localhost:1313/2020/01/18/%E4%BB%8E%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E4%B8%8D%E7%AD%89%E5%BC%8F%E5%88%B0%E5%BC%B1%E5%A4%A7%E6%95%B0%E5%AE%9A%E5%BE%8B/</guid>
      <description>回过头来看，从马尔可夫不等式到大数定律的推导，乃是概率论到统计学的桥梁。过去一直对这里感到迷茫，但其实稍微整理一下就会很清楚：&#xA;首先是Markov不等式。 它是以俄国数学家Andrey Andreyevich Markov的名字命名，同时也有Markov Chain这个在信息论上著名的东西。这个不等式，简单而言，就是我们可以一个随机变量的期望值判断这个随机变量取值的概率：&#xA;$$P(X \geq a) \leq \dfrac{E[X]}{a} (given \ X \geq 0)$$&#xA;显而易见，随机变量大于更大的(a)的概率会越低。比方说，当​ $( a = E[X] )$的时候，我们有​$( P(X \geq E[x]) \leq 1 )$ , 这句话没有带来任何信息，因为概率必定小于等于1。 但如果$( a = 2E[X] )$​, 我们可以得到$( P(X \geq 2E[X]) \leq 0.5 )$​, 也就是说随机变量取值大于等于两倍期望值的概率必然不大于50%. 马尔可夫不等式维基百科上举例也清晰易懂:&#xA;马尔可夫不等式的一个应用是，不超过1/5的人口会有超过5倍于人均收入的收入。&#xA;「概率导论」 一书构造了一个随机变量​ $(Y_a)$来证明这个不等式:&#xA;$$&#xA;\begin{equation}&#xA;Y_a=&#xA;\begin{cases}&#xA;0, (X &amp;lt; a) \&#xA;a, (X \geq a)&#xA;\end{cases}&#xA;\end{equation}&#xA;$$&#xA;那么:&#xA;$$E[Y_a] = P(X &amp;lt; a) * 0 + P(X \geq a) * a = a*P(X \geq a)$$</description>
    </item>
    <item>
      <title>「算法4」笔记</title>
      <link>http://localhost:1313/%E7%AE%97%E6%B3%954%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/%E7%AE%97%E6%B3%954%E7%AC%94%E8%AE%B0/</guid>
      <description>这则笔记主要记录我在阅读「算法」（by Robert Sedgewick et Kevin Wayne）这本书时学到的基本的算法和思想。&#xA;第一章：算法基础 面向API编程的思维：先去考量这个程序将要实现什么API，然后分门别类写它的实现。&#xA;三种数据结构：背包（bag），队列（queue）（包括双向队列），栈（stack）。分别用数组（array）和链表（linked list）实现。&#xA;算法分析：能够分析算法的时间复杂度。（当然这个我以前就会，因此不再赘述）&#xA;具体问题：&#xA;binomial distribution： 伯努利分布（二项分布）的递归和递推 Binary Search： 时间复杂度为(lg N) 的一种查找方式，前提是数列本身是有序的。 fibonacci Search： 一种只用加减的查找方式，二分查找的一种变体。 Welford 算法： 一种求方差的one-pass 算法，可以实现空间复杂度仅为(O(1)) 。因为精度的缘故，数学上普通的方差计算方式极有可能得到相当离谱的方差结果。 Dijkstra 双栈算数表达式求和：非常经典的算法。双栈模型可以用于各种问题的解决，并且本身也可以做到相当多的事情：比如仅用递归函数，用双栈对其中一个栈进行逆序。 2-sum：是解决3-sum的基础。一般而言比较优秀的算法是首先进行快排，接着进行遍历+二分查找。这样可以让时间复杂度变为(O(N lg N))。 第二章：排序 初级排序算法：选择排序(Select Sort)， 插入排序(Insertion Sort)，希尔排序(Shell Sort)。我将Shell Sort看作是Insetion Sort的一种特别形式。这三种算法中，尽管Select是最慢的（因为无法利用最初输入的顺序），但它所需要的空间是最小的。&#xA;归并排序（Merge Sort）（我总是不记得到底是「归并」还是「并归」）：一种分治（divide-and-conquer）思想的排序算法。事实上分成两个部分，一个部分是一个递归的sort函数，另一个是将sort的两部分merge起来的函数。是一种渐进最优的排序算法，时间是(N lg N)级别的。&#xA;快速排序（Quick Sort）：Merge排序依然需要一个辅助的队列auxiliay。但快速排序则是将时间最短和空间小这两个优点结合了起来。它同样其实也是两个部分，一个是一个递归的Sort函数，另一个是寻找切分点的partition函数。但它的问题是比较脆弱。&#xA;脆弱来源于何处：比如在选取分割点的时候，如果每次取得用于分割的元素恰好位于最小或者最大值，这样性能就比较低劣。因为在快排的时候一定要事先进行Shuffle使得数组处于乱序。这样平均之下更容易取到恰好中间分割的数字。（引申出了我一个问题：如何最快取得一个数组的中位数？如何one-pass地获取一个stream的中位数列？）&#xA;处理含有大量重复元素时：三向切分是更有效的方式。&#xA;重点： 切分的写法。&#xA;优先队列（Priority Queues）：事实上是一种部分排序的数据模型。比如当计算机给各种应用分配资源时，看重的是最重要的若干个程序的资源，因此实际上我们只要能够找出有限个的最大值就可。&#xA;它支持两种操作：delMax（删除最大元素）， 以及 insert（插入元素）。&#xA;为了实现优先队列，这里提到了一种新的数据结构，这里提到了新的数据结构：二叉堆（binary heap）（或者简称「堆」）。但事实上，它仍然是一个数组，it’s all about imagination。这些数组可以被想象成树状结构，因此我们在删除最大元素和插入元素时可以以(O(lgN))的时间复杂度完成它。&#xA;但这本书截至介绍二叉堆时，其实并没有介绍二叉树（？）。关于二叉树（Binary tree），完全二叉树（Complete Binary Tree）的东西：CMU的课件。&#xA;我对于优先队列的认知是，能够在输入数据的同时对数据加以排序。&#xA;索引优先队列：为了方便引用优先队列中的元素，在优先队列上，给每个元素做了索引。实现了更多的几个方法。&#xA;堆排序（HeapSort）： 唯一能够同时最优利用空间和时间的方法。但是现代应用程序当中排序主要还是利用快排，之所以如此是因为堆排序无法利用缓存。&#xA;具体问题：</description>
    </item>
  </channel>
</rss>
