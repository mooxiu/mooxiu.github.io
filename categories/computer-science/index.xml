<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Science on New River, New Water</title>
    <link>https://mooxiu.github.io/categories/computer-science/</link>
    <description>Recent content in Computer Science on New River, New Water</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2024, haruka hsiao.</copyright>
    <lastBuildDate>Wed, 21 Aug 2024 22:06:42 +0900</lastBuildDate>
    <atom:link href="https://mooxiu.github.io/categories/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My note on LLVM</title>
      <link>https://mooxiu.github.io/my-note-on-llvm/</link>
      <pubDate>Wed, 21 Aug 2024 22:06:42 +0900</pubDate>
      <guid>https://mooxiu.github.io/my-note-on-llvm/</guid>
      <description>&lt;p&gt;This is my note for &lt;a href=&#34;https://www.youtube.com/watch?v=J5xExRGaIIY&#34;&gt;This LLVM Talk&lt;/a&gt;. This is a very beginning level note.&lt;/p&gt;&#xA;&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LLVM monorepo: Now the &lt;a href=&#34;https://github.com/llvm/llvm-project&#34;&gt;single source of truth&lt;/a&gt; is now in github.&lt;/li&gt;&#xA;&lt;li&gt;Subdirectories:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Each one is a sub project.&lt;/li&gt;&#xA;&lt;li&gt;The most famous one is &lt;code&gt;llvm-project/clang&lt;/code&gt; (the &amp;ldquo;core&amp;rdquo;)(front-end for C/C++/Cuda, etc)(what is front-end)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Building: default building is debug build, and very slow&#xA;&lt;ul&gt;&#xA;&lt;li&gt;More on /GettingStarted.html&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;compilers&#34;&gt;Compilers&lt;/h2&gt;&#xA;&lt;p&gt;file.cpp -&amp;gt; Clang AST -&amp;gt; LLVM IR -&amp;gt; Selection DAG -&amp;gt; LLVM MIR -&amp;gt; Machine Code&#xA;&lt;img src=&#34;compiler.jpg&#34; alt=&#34;Compiler&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to avoid aliasing in Virtual Indexed Physical Tagged</title>
      <link>https://mooxiu.github.io/how-to-avoid-aliasing-in-virtual-indexed-physical-tagged/</link>
      <pubDate>Sat, 20 Jul 2024 17:44:00 +0900</pubDate>
      <guid>https://mooxiu.github.io/how-to-avoid-aliasing-in-virtual-indexed-physical-tagged/</guid>
      <description>&lt;p&gt;The problem of VIPT(Virtual Indexed Physical Tagged) cache is that multiple virtual addresses can be mapped to the same physical address. This is not a problem for physical indexed and physical tagged cache (AKA, the standard practice), but for VIPT, the virtual address can fetch memory blocks to different caches, once a cache has been written, there&amp;rsquo;s a problem of inconsistency, whcih is so-called &amp;ldquo;aliasing&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;To prevent it, we can make those virtual addresses mapped to the same cache. Let&amp;rsquo;s check a virtual address:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
